package SongApplication;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author PREDATOR
 */
public class AppFrame extends javax.swing.JFrame {
    //Variables Decleration 
    List<String> Genre = new LinkedList<>(Arrays.asList("Pop","HipHop","Rock","Metal","Classical"));
    List<String> Artists = new LinkedList<>(Arrays.asList("Madonna","Beyonce","Taylor Swift","Kanye West","Jay Z","Eminem","Queen","The Beatles","ACDC","Metallica","Iron Maiden","Megadeth","Mozart","Johann Sebastian","Beethoven"));
    List<String> Tracks = new LinkedList<>(Arrays.asList("Vogue","Hung Up","Holiday","Halo","Crazy In Love","Love On Top","Shake It Off","Blank Space","22","Follow God","Stronger","I Love It","Otis","Song Cry","Run This Town","Space Bound","Head Ligths","Mocking Bird","Killer Queen","Bohemian Rhapsody","We Will Rock You","I Love Her","Hey Jude","Yellow Submarine","Thunderstruck","Back In Black","Highway To Hell","Nothing Else Matters","Unforgiven","Sad But True","Aces High","Run To The Hills","Wasting Love","Hangar 18","Trust","Wake Up Dead","Requiem","The Magic Flute","Don Giovanni","Christmas Oratorio","Ave Maria","Mass in B Minor","Fur Elise","Fidelio","Violin Concerto"));
    List<Integer> Price = new LinkedList<>(Arrays.asList(7,4,4,3,4,6,5,4,7,8,9,3,4,4,5,6,12,4,6,7,4,8,6,5,6,7,9,3,4,5,7,5,5,6,4,3,2,10,7,12,13,15,9,9,12));
    int selectionPrice = 0;
    boolean licenseChecker = false;
    private final Search obj = new Search();
    ArrayList<DataModel> tableData = new ArrayList<>();

    /**
     * Creates new form NewJFrame
     */
    public AppFrame() {
        initComponents();
        errorLabel.setVisible(false);
        successMessageLabel.setVisible(false);
        getTableData();
        topSellingGenre.setText(new DataModel().topItemDisplay(tableData,0));
        topSellingArtist.setText(new DataModel().topItemDisplay(tableData,1));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        commercialLicenseRadioButton = new javax.swing.ButtonGroup();
        backPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        errorLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        dollarLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        priceAmountLabel = new javax.swing.JLabel();
        deleteRowButton = new javax.swing.JButton();
        priceLabel = new javax.swing.JLabel();
        inputFieldPanel = new javax.swing.JPanel();
        trackComboBox = new javax.swing.JComboBox<>();
        noRadioButton = new javax.swing.JRadioButton();
        posterCheckBox = new javax.swing.JCheckBox();
        serialNumberLabel = new javax.swing.JLabel();
        accessoriesLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        genreLabel = new javax.swing.JLabel();
        commercialLicenseLabel = new javax.swing.JLabel();
        yesRadioButton = new javax.swing.JRadioButton();
        additionalCoverCheckBox = new javax.swing.JCheckBox();
        genreComboBox = new javax.swing.JComboBox<>();
        trackLabel = new javax.swing.JLabel();
        artistComboBox = new javax.swing.JComboBox<>();
        serialNumberField = new javax.swing.JTextField();
        artistLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        successMessageLabel = new javax.swing.JLabel();
        rightPanel = new java.awt.Panel();
        searchByPriceLabel1 = new javax.swing.JLabel();
        searchByPriceField = new javax.swing.JTextField();
        searchByPriceButton = new javax.swing.JButton();
        searchByPriceLabel = new javax.swing.JLabel();
        searchByGenreField = new javax.swing.JTextField();
        searchByGenreButton = new javax.swing.JButton();
        topSellingGenre = new javax.swing.JLabel();
        topSellingGenreLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        topSellingArtistLabel = new javax.swing.JLabel();
        topSellingArtist = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenu = new javax.swing.JMenuItem();
        closeMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        openHelpFile = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Store ");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);

        backPanel.setBackground(new java.awt.Color(0, 0, 0));

        leftPanel.setBackground(new java.awt.Color(55, 55, 55));

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Pranjal Kanel", "Pop", "Beyonce", "Halo", "Additional Cover,Poster", "Yes", "16"},
                {"2", "Udaya Raj Pandey", "Rock", "Queen", "Bohemian Rhapsody", "Additional Cover", "Yes", "19"},
                {"3", "Adarsh Subedi", "Hip Hop", "Kanye West", "I Love It", "Additional Cover,Poster", "No", "6"},
                {"4", "Meru Sangroula", "Classical", "Beethoven", "Violin Concerto", "Additional Cover,Poster", "Yes", "25"},
                {"5", "Sodip Bikram Thapa", "Metal", "Metallica", "Nothing Else Matters", "", "Yes", "13"},
                {"6", "Aaryan Shrestha", "Hip Hop", "Eminem", "Mocking Bird", "Additional Cover", "Yes", "16"},
                {"7", "Sachyam Shakya", "Rock", "ACDC", "Thunderstruck", "Additional Cover", "No", "6"},
                {"8", "Sirjan Baniya", "Pop", "Taylor Swift", "Shake It Off", "Additional Cover,Poster", "Yes", "18"},
                {"9", "Ekata Tandukar", "Hip Hop", "Jay Z", "Otis", "Additional Cover, Poster", "Yes", "17"},
                {"10", "Basant Tamang", "Pop", "Madonna", "Hung Up", "Additional Cover", "Yes", "16"},
                {"11", "Kushal Fuyal", "Rock", "The Beatles", "Hey Jude", "", "No", "6"},
                {"12", "Robert Thapa Magar", "Classical", "Johann Sebastian", "Ave Maria", "Additional Cover,Poster", "Yes", "16"}
            },
            new String [] {
                "SerialNumber", "CustomerName", "Genre", "Artist ", "Track", "Accessories", "CommercialLicense", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setResizable(false);
            dataTable.getColumnModel().getColumn(1).setResizable(false);
            dataTable.getColumnModel().getColumn(2).setResizable(false);
            dataTable.getColumnModel().getColumn(3).setResizable(false);
            dataTable.getColumnModel().getColumn(4).setResizable(false);
            dataTable.getColumnModel().getColumn(5).setResizable(false);
            dataTable.getColumnModel().getColumn(6).setResizable(false);
            dataTable.getColumnModel().getColumn(7).setResizable(false);
        }

        errorLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setText("PLEASE FILL ALL THE FIELDS");

        buttonPanel.setBackground(new java.awt.Color(50, 50, 50));
        buttonPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        dollarLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dollarLabel.setForeground(new java.awt.Color(255, 255, 255));
        dollarLabel.setText("$");

        addButton.setBackground(new java.awt.Color(75, 75, 75));
        addButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("ADD");
        addButton.setBorderPainted(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        priceAmountLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        priceAmountLabel.setForeground(new java.awt.Color(255, 255, 255));
        priceAmountLabel.setText("0");

        deleteRowButton.setBackground(new java.awt.Color(105, 10, 10));
        deleteRowButton.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        deleteRowButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteRowButton.setText("Delete Selected Row");
        deleteRowButton.setBorderPainted(false);
        deleteRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRowButtonActionPerformed(evt);
            }
        });

        priceLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(255, 255, 255));
        priceLabel.setText("Price");

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteRowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(priceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dollarLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dollarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(deleteRowButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        inputFieldPanel.setBackground(new java.awt.Color(50, 50, 50));
        inputFieldPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        inputFieldPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                inputFieldPanelMouseEntered(evt);
            }
        });

        trackComboBox.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        trackComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Track" }));
        trackComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackComboBoxActionPerformed(evt);
            }
        });

        noRadioButton.setBackground(new java.awt.Color(55, 55, 55));
        commercialLicenseRadioButton.add(noRadioButton);
        noRadioButton.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        noRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        noRadioButton.setText("No");
        noRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noRadioButtonActionPerformed(evt);
            }
        });

        posterCheckBox.setBackground(new java.awt.Color(55, 55, 55));
        posterCheckBox.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        posterCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        posterCheckBox.setText("Poster");
        posterCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posterCheckBoxActionPerformed(evt);
            }
        });

        serialNumberLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        serialNumberLabel.setForeground(new java.awt.Color(255, 255, 255));
        serialNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        serialNumberLabel.setText("S.NO");

        accessoriesLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        accessoriesLabel.setForeground(new java.awt.Color(255, 255, 255));
        accessoriesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        accessoriesLabel.setText("Accessories");

        nameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nameField.setBorder(null);

        genreLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        genreLabel.setForeground(new java.awt.Color(255, 255, 255));
        genreLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        genreLabel.setText("Genre");

        commercialLicenseLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        commercialLicenseLabel.setForeground(new java.awt.Color(255, 255, 255));
        commercialLicenseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        commercialLicenseLabel.setText("Commercial License");

        yesRadioButton.setBackground(new java.awt.Color(55, 55, 55));
        commercialLicenseRadioButton.add(yesRadioButton);
        yesRadioButton.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        yesRadioButton.setForeground(new java.awt.Color(255, 255, 255));
        yesRadioButton.setText("Yes");
        yesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesRadioButtonActionPerformed(evt);
            }
        });

        additionalCoverCheckBox.setBackground(new java.awt.Color(55, 55, 55));
        additionalCoverCheckBox.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        additionalCoverCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        additionalCoverCheckBox.setText("Additional Cover");
        additionalCoverCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additionalCoverCheckBoxActionPerformed(evt);
            }
        });

        genreComboBox.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        genreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genre", "Pop", "Hip Hop", "Rock", "Metal", "Classical" }));
        genreComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreComboBoxActionPerformed(evt);
            }
        });

        trackLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        trackLabel.setForeground(new java.awt.Color(255, 255, 255));
        trackLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        trackLabel.setText("Track ");

        artistComboBox.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        artistComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Artist" }));
        artistComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistComboBoxActionPerformed(evt);
            }
        });

        serialNumberField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        serialNumberField.setBorder(null);

        artistLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        artistLabel.setForeground(new java.awt.Color(255, 255, 255));
        artistLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        artistLabel.setText("Artist");

        nameLabel.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nameLabel.setText("Buyer Name");

        javax.swing.GroupLayout inputFieldPanelLayout = new javax.swing.GroupLayout(inputFieldPanel);
        inputFieldPanel.setLayout(inputFieldPanelLayout);
        inputFieldPanelLayout.setHorizontalGroup(
            inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputFieldPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(inputFieldPanelLayout.createSequentialGroup()
                            .addComponent(serialNumberLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(serialNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, inputFieldPanelLayout.createSequentialGroup()
                            .addComponent(genreLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, inputFieldPanelLayout.createSequentialGroup()
                            .addComponent(artistLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(artistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(inputFieldPanelLayout.createSequentialGroup()
                            .addComponent(nameLabel)
                            .addGap(84, 84, 84)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(commercialLicenseLabel)
                    .addGroup(inputFieldPanelLayout.createSequentialGroup()
                        .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accessoriesLabel)
                            .addComponent(trackLabel))
                        .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(inputFieldPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, inputFieldPanelLayout.createSequentialGroup()
                                        .addComponent(yesRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(noRadioButton))
                                    .addComponent(additionalCoverCheckBox))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(posterCheckBox))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputFieldPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(trackComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)))))
                .addContainerGap())
        );
        inputFieldPanelLayout.setVerticalGroup(
            inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputFieldPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serialNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serialNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genreComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(artistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(artistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trackComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accessoriesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(additionalCoverCheckBox)
                    .addComponent(posterCheckBox))
                .addGap(11, 11, 11)
                .addGroup(inputFieldPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commercialLicenseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yesRadioButton)
                    .addComponent(noRadioButton))
                .addContainerGap())
        );

        successMessageLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        successMessageLabel.setForeground(new java.awt.Color(255, 255, 255));
        successMessageLabel.setText("Value Added Successfully");

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(inputFieldPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(91, 91, 91)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(successMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(successMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(inputFieldPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rightPanel.setBackground(new java.awt.Color(5, 5, 5));
        rightPanel.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        searchByPriceLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchByPriceLabel1.setForeground(new java.awt.Color(255, 255, 255));
        searchByPriceLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchByPriceLabel1.setText("Search By Price");

        searchByPriceField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchByPriceField.setBorder(null);
        searchByPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByPriceFieldActionPerformed(evt);
            }
        });

        searchByPriceButton.setBackground(new java.awt.Color(75, 75, 75));
        searchByPriceButton.setForeground(new java.awt.Color(255, 255, 255));
        searchByPriceButton.setText("🔍");
        searchByPriceButton.setBorderPainted(false);
        searchByPriceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByPriceButtonActionPerformed(evt);
            }
        });

        searchByPriceLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchByPriceLabel.setForeground(new java.awt.Color(255, 255, 255));
        searchByPriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        searchByPriceLabel.setText("Search By Genre");

        searchByGenreField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        searchByGenreField.setBorder(null);
        searchByGenreField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByGenreFieldActionPerformed(evt);
            }
        });

        searchByGenreButton.setBackground(new java.awt.Color(75, 75, 75));
        searchByGenreButton.setForeground(new java.awt.Color(255, 255, 255));
        searchByGenreButton.setText("🔍");
        searchByGenreButton.setBorderPainted(false);
        searchByGenreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByGenreButtonActionPerformed(evt);
            }
        });

        topSellingGenre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        topSellingGenre.setForeground(new java.awt.Color(255, 255, 255));
        topSellingGenre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        topSellingGenre.setText("Genre");

        topSellingGenreLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        topSellingGenreLabel1.setForeground(new java.awt.Color(255, 255, 255));
        topSellingGenreLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        topSellingGenreLabel1.setText("Top Selling Genre");

        topSellingArtistLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        topSellingArtistLabel.setForeground(new java.awt.Color(255, 255, 255));
        topSellingArtistLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        topSellingArtistLabel.setText("Top Selling Artist");

        topSellingArtist.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        topSellingArtist.setForeground(new java.awt.Color(255, 255, 255));
        topSellingArtist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        topSellingArtist.setText("Artist");

        javax.swing.GroupLayout backPanelLayout = new javax.swing.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backPanelLayout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backPanelLayout.createSequentialGroup()
                        .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topSellingGenre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(topSellingArtist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(topSellingGenreLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(topSellingArtistLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(backPanelLayout.createSequentialGroup()
                        .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backPanelLayout.createSequentialGroup()
                                .addComponent(searchByPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchByPriceButton))
                            .addGroup(backPanelLayout.createSequentialGroup()
                                .addComponent(searchByGenreField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchByGenreButton))
                            .addComponent(searchByPriceLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchByPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchByPriceLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchByPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByPriceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(searchByPriceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchByGenreField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByGenreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(backPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(topSellingGenreLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(topSellingGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(topSellingArtistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(topSellingArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        menuBar.setBackground(new java.awt.Color(0, 0, 0));
        menuBar.setForeground(new java.awt.Color(255, 255, 255));
        menuBar.setBorderPainted(false);

        fileMenu.setText("File");

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        closeMenu.setText("Close");
        closeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenu);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        openHelpFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        openHelpFile.setText("Help File");
        openHelpFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openHelpFileActionPerformed(evt);
            }
        });
        helpMenu.add(openHelpFile);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* To addd data into the table*/
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(!validateInput()){
            ValidationStore store = new ValidationStore();
            store.validateStoreData(dataTable, commercialLicenseRadioButton, yesRadioButton, noRadioButton, serialNumberField, nameField, genreComboBox, artistComboBox, trackComboBox, additionalCoverCheckBox, posterCheckBox, selectionPrice,tableData);
            successMessageLabel.setVisible(true);
            errorLabel.setVisible(false);
        }
        
        serialNumberField.setText("");
        nameField.setText("");
        genreComboBox.setSelectedIndex(0);
        topSellingGenre.setText(new DataModel().topItemDisplay(tableData,0));
        topSellingArtist.setText(new DataModel().topItemDisplay(tableData,1));
    }//GEN-LAST:event_addButtonActionPerformed

    /*Populating data in combobox to choose genre*/
    private void genreComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreComboBoxActionPerformed
        //Checking if genre is selected or not
        if(genreComboBox.getSelectedIndex() == 0){
            additionalCoverCheckBox.setSelected(false);
            posterCheckBox.setSelected(false);
            licenseChecker = false;
            commercialLicenseRadioButton.clearSelection();
            artistComboBox.removeAllItems();
            artistComboBox.addItem("Artists");
        }
        //To populate data in artist combobox
        else{
            artistComboBox.removeAllItems();
            switch (genreComboBox.getSelectedIndex()) {
                case 1:
                    artistComboBox.addItem("Pop Artists");
                    break;
                case 2:
                    artistComboBox.addItem("HipPop Artists");
                    break;
                case 3:
                    artistComboBox.addItem("Rock Artists");
                    break;
                case 4:
                    artistComboBox.addItem("Metal Artists");
                    break;
                case 5:
                    artistComboBox.addItem("Classical Artists");
                    break;
                default:
                    artistComboBox.addItem("Artists");
                    break;
            }
            int j = (genreComboBox.getSelectedIndex()*3)-3;
            for(int i = j; i<j+3; i++){
                artistComboBox.addItem(Artists.get(i));
            }
        }
        
    }//GEN-LAST:event_genreComboBoxActionPerformed
    
    /*To populate data in track combo box in accordance to artist selection*/
    private void artistComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artistComboBoxActionPerformed
        //If artist isn't selected
        if(artistComboBox.getSelectedIndex() == 0){
            additionalCoverCheckBox.setSelected(false);
            posterCheckBox.setSelected(false);
            licenseChecker = false;
            commercialLicenseRadioButton.clearSelection();
            trackComboBox.removeAllItems();
            trackComboBox.addItem("Track");
        }else if (artistComboBox.getSelectedIndex() > 0 && genreComboBox.getSelectedIndex() > 0){
            trackComboBox.removeAllItems();
            trackComboBox.addItem("Track");
            int j = ((artistComboBox.getSelectedIndex()*3)-3) + ((genreComboBox.getSelectedIndex()*9)-9);
            for(int i = j; i<j+3; i++){
                trackComboBox.addItem(Tracks.get(i));
            }
        }
    }//GEN-LAST:event_artistComboBoxActionPerformed
    
    /*Actions after selecting a combobox*/
    private void trackComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackComboBoxActionPerformed
        if(trackComboBox.getSelectedIndex() == 0){
            additionalCoverCheckBox.setSelected(false);
            posterCheckBox.setSelected(false);
            licenseChecker = false;
            commercialLicenseRadioButton.clearSelection();
        }
        if(trackComboBox.getSelectedIndex()>0){
            priceAmountLabel.setText(""+getPrice());
        }
    }//GEN-LAST:event_trackComboBoxActionPerformed

    /*Checking if checkboxes are selected or not and adding their calculations*/
    private void additionalCoverCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_additionalCoverCheckBoxActionPerformed
        if(selectionPrice != 0){
            if(additionalCoverCheckBox.isSelected()){
                    selectionPrice = selectionPrice +2;
            }else if(!additionalCoverCheckBox.isSelected()) {
                selectionPrice = selectionPrice - 2;
            }
            priceAmountLabel.setText(""+selectionPrice);
        }
    }//GEN-LAST:event_additionalCoverCheckBoxActionPerformed

    /*Checking if checkboxes are selected or not and adding their calculations*/
    private void posterCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posterCheckBoxActionPerformed
        if(selectionPrice != 0){
            if(posterCheckBox.isSelected()){
                    selectionPrice++;
            }else if(!posterCheckBox.isSelected()){
                selectionPrice--;
            }
            priceAmountLabel.setText(""+selectionPrice);
        }
    }//GEN-LAST:event_posterCheckBoxActionPerformed

    /*Checking if radio buttons are selected and adding their calculations*/
    private void yesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesRadioButtonActionPerformed
        if(!licenseChecker && yesRadioButton.isSelected() && selectionPrice != 0){ 
            selectionPrice = selectionPrice + 10;
            licenseChecker = true;
        }
        priceAmountLabel.setText(""+selectionPrice);
    }//GEN-LAST:event_yesRadioButtonActionPerformed

    /*Checking if radio buttons are selected and adding their calculations*/
    private void noRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noRadioButtonActionPerformed
        if(licenseChecker && noRadioButton.isSelected()){
            selectionPrice = selectionPrice - 10;
            licenseChecker = false;
        }
        priceAmountLabel.setText(""+selectionPrice);
    }//GEN-LAST:event_noRadioButtonActionPerformed

    /*Deleting selected row from the table by deleting data in objects arraylist and updating the table*/
    private void deleteRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRowButtonActionPerformed
        if(dataTable.getSelectedRow() > 0){
            int deleteOption = JOptionPane.showConfirmDialog(null,"Do You Want To Delete The Selected Row?","Confirm",JOptionPane.YES_NO_OPTION);
        
            if(deleteOption == 0){
                int selectedIndex = dataTable.getSelectedRow();
                tableData.remove(selectedIndex);
                clearTable();
                updateTable(tableData);
            }
        }
        topSellingGenre.setText(new DataModel().topItemDisplay(tableData,0));
        topSellingArtist.setText(new DataModel().topItemDisplay(tableData,1));
    }//GEN-LAST:event_deleteRowButtonActionPerformed

    /*To close the application from menu bar*/
    private void closeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuActionPerformed
        dispose();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_closeMenuActionPerformed

    /*To open saved purchases*/
    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
       final JFileChooser choose = new JFileChooser();
       int response= choose.showOpenDialog(null);
       if(response == JFileChooser.APPROVE_OPTION){
           String filename=choose.getSelectedFile().getName();
           String[] checkFileType = filename.split(Pattern.quote("."));
           if(checkFileType[1].equalsIgnoreCase("csv")){                    //checking if file extension is correct
                File openfile = choose.getSelectedFile();
                try {
                    BufferedReader br =new BufferedReader(new FileReader(openfile));
                    Object[] tableLines= br.lines().toArray();
                    for(int i=0; i< tableLines.length; i++){
                        String line = tableLines[i].toString().trim();
                        String[] dataRow = line.split("/");
                        DefaultTableModel model=(DefaultTableModel)dataTable.getModel();
                        model.addRow(dataRow);
                    }
                }catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(null, "The file you selected could not be found.","File Not Found",JOptionPane.ERROR_MESSAGE); 
                }
            }else{
                JOptionPane.showMessageDialog(null, "Please select a file with CSV file extension.","Wrong File Type",JOptionPane.ERROR_MESSAGE);
            }
       }
       getTableData();
       topSellingGenre.setText(new DataModel().topItemDisplay(tableData,0));
       topSellingArtist.setText(new DataModel().topItemDisplay(tableData,1));
    }//GEN-LAST:event_openMenuActionPerformed

    /*To perform binary search*/
    private void searchByPriceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByPriceButtonActionPerformed
        sort();
        obj.searchByPrice(searchByPriceField,tableData);
    }//GEN-LAST:event_searchByPriceButtonActionPerformed
    
    /*To perform linear search*/
    private void searchByGenreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByGenreButtonActionPerformed
        obj.searchByGenre(searchByGenreField,dataTable,tableData);
    }//GEN-LAST:event_searchByGenreButtonActionPerformed

    /*To hide display labels*/
    private void inputFieldPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputFieldPanelMouseEntered
        successMessageLabel.setVisible(false);
    }//GEN-LAST:event_inputFieldPanelMouseEntered

    /*To perform binary search by pressing enter on text field*/
    private void searchByPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByPriceFieldActionPerformed
        sort();
        obj.searchByPrice(searchByPriceField,tableData);
    }//GEN-LAST:event_searchByPriceFieldActionPerformed

    /*To perform linear search by pressing enter on text field*/
    private void searchByGenreFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByGenreFieldActionPerformed
        obj.searchByGenre(searchByGenreField,dataTable,tableData);
    }//GEN-LAST:event_searchByGenreFieldActionPerformed
    
    /*To open pdf file*/
    private void openHelpFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openHelpFileActionPerformed
        if(Desktop.isDesktopSupported()){
            try{
                Desktop.getDesktop().open(new File("Src/Files/help.pdf"));
            }catch(IOException e){
                JOptionPane.showMessageDialog(null, "File not supported", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
                JOptionPane.showMessageDialog(null, "File not found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openHelpFileActionPerformed
    
    /*To store data of tables in objects and storing objects in array list*/
    final void getTableData(){
        int rowCount = dataTable.getRowCount();
        String serialNumber;
        String name;
        String genre;
        String artist;
        String track;
        String accessories;
        String commercialLicense;
        int nPrice;
        for(int i=0;i<rowCount;i++){
           serialNumber = dataTable.getValueAt(i, 0).toString();
           name = dataTable.getValueAt(i, 1).toString();
           genre = dataTable.getValueAt(i, 2).toString();
           artist = dataTable.getValueAt(i, 3).toString();
           track = dataTable.getValueAt(i, 4).toString();
           accessories = dataTable.getValueAt(i, 5).toString();
           commercialLicense = dataTable.getValueAt(i, 6).toString();
           nPrice = Integer.parseInt(dataTable.getValueAt(i, 7).toString());
           tableData.add(new DataModel(serialNumber,name,genre,artist,track,accessories,commercialLicense,nPrice));     //Storing object of DataModel class
        }
    }
    
    /*Sorting the arraylist using selection sort containing objects in ascending order according to price*/
    public  void sort(){  
      DataModel tempData;
        for(int i = 0; i<tableData.size(); i++){
            int minimumPosition = returnMinPos(tableData, i);
            tempData = tableData.get(minimumPosition);
            tableData.set(minimumPosition, tableData.get(i));
            tableData.set(i,tempData);
        }
    }
    
    /*Returning minimum position for selection sort*/
    public int returnMinPos(ArrayList<DataModel> list,int currentMinimumPosition){
        int minPosition = currentMinimumPosition;
        for(int currentValue = currentMinimumPosition+1;currentValue<list.size();currentValue++){
            if(list.get(currentValue).price < list.get(minPosition).price){
                minPosition = currentValue;
            }
        }
        return minPosition;
    }
    
    /*Removing all the objects in arraylist to simulate deletion of row*/
    public void clearTable(){
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        int rowcount = model.getRowCount();
        for(int i = 0; i<rowcount; i++){
            model.removeRow(0);
        }
    }
    
    /*To set values in rows of table after objects or their values are changed*/
    public void updateTable(ArrayList<DataModel>List1){
        DefaultTableModel mainTableModel = (DefaultTableModel) dataTable.getModel();
        for(int i=0; i <List1.size(); i++){
            DataModel model = List1.get(i);
            Object[] objectRow = new Object[]{model.serialNumber, model.name, model.genre, model.artist, model.track, model.accessories, model.commercialLicense,model.price};
            mainTableModel.addRow(objectRow);
        }
    }
    
    /*To get price from pirce linkedlist according to genre,artist and track selectd*/
    public int getPrice(){
        selectionPrice = 0;
        if(genreComboBox.getSelectedIndex() != 0 && artistComboBox.getSelectedIndex() != 0 && trackComboBox.getSelectedIndex() != 0){
            selectionPrice = Price.get((genreComboBox.getSelectedIndex()*9-9)+(artistComboBox.getSelectedIndex()*3-3)+(trackComboBox.getSelectedIndex()-1));
        }
        return selectionPrice;
    }
    
    /*Validating if input fields are empty*/
    public boolean validateInput(){
        int emptyFields = 0;
        if(nameField.getText().trim().isEmpty() || serialNumberField.getText().trim().isEmpty()){
            emptyFields++;
        }
        if(genreComboBox.getSelectedIndex()== 0){
           emptyFields++;
        }
        if(artistComboBox.getSelectedIndex()== 0){
            emptyFields++;
        }
        if(trackComboBox.getSelectedIndex()== 0){
            emptyFields++;
        }
        if(commercialLicenseRadioButton.getSelection() == null){
            emptyFields++;
        }
        if(emptyFields>0){
            errorLabel.setVisible(true);
            return true;
        }if(emptyFields == 0){
            try{
                Integer.parseInt(serialNumberField.getText());
            }
            catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Serial Number can only be a number.","Wrong Input",JOptionPane.ERROR_MESSAGE);
                return true;
            }
            if(!validateString(nameField.getText())){
                JOptionPane.showMessageDialog(null, "Buyer name can only have alphabets.","Wrong Input",JOptionPane.ERROR_MESSAGE); 
                return true;
            }
        }
        return false;
    }
    
    /*Validating if input field meant for string has numeric values in it*/
    public boolean validateString(String name) {
      name = name.toLowerCase();
      char[] charArray = name.toCharArray();
      for (int i = 0; i < charArray.length; i++) {
         char ch = charArray[i];
         if (!(ch >= 'a' && ch <= 'z') && ch != ' ') {
            return false;
         }
      }
      return true;
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppFrame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accessoriesLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JCheckBox additionalCoverCheckBox;
    private javax.swing.JComboBox<String> artistComboBox;
    private javax.swing.JLabel artistLabel;
    private javax.swing.JPanel backPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JMenuItem closeMenu;
    private javax.swing.JLabel commercialLicenseLabel;
    private javax.swing.ButtonGroup commercialLicenseRadioButton;
    private javax.swing.JTable dataTable;
    private javax.swing.JButton deleteRowButton;
    private javax.swing.JLabel dollarLabel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> genreComboBox;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel inputFieldPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JRadioButton noRadioButton;
    private javax.swing.JMenuItem openHelpFile;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JCheckBox posterCheckBox;
    private javax.swing.JLabel priceAmountLabel;
    private javax.swing.JLabel priceLabel;
    private java.awt.Panel rightPanel;
    private javax.swing.JButton searchByGenreButton;
    private javax.swing.JTextField searchByGenreField;
    private javax.swing.JButton searchByPriceButton;
    private javax.swing.JTextField searchByPriceField;
    private javax.swing.JLabel searchByPriceLabel;
    private javax.swing.JLabel searchByPriceLabel1;
    private javax.swing.JTextField serialNumberField;
    private javax.swing.JLabel serialNumberLabel;
    private javax.swing.JLabel successMessageLabel;
    private javax.swing.JLabel topSellingArtist;
    private javax.swing.JLabel topSellingArtistLabel;
    private javax.swing.JLabel topSellingGenre;
    private javax.swing.JLabel topSellingGenreLabel1;
    private javax.swing.JComboBox<String> trackComboBox;
    private javax.swing.JLabel trackLabel;
    private javax.swing.JRadioButton yesRadioButton;
    // End of variables declaration//GEN-END:variables
    
}
